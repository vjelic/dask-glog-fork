{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "a03ca430-b846-3577-bfca-e4baa1627868",
              "name": "resources.rules.missing-ratelimit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.missing-ratelimit"
              },
              "fullDescription": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Function '$FUNC' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart](https://github.com/jsocol/django-ratelimit/blob/main/docs/index.rst#quickstart)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.missing-ratelimit"
                ]
              }
            },
            {
              "id": "dba00224-9ae8-3667-80d1-dd8bd4b14369",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "2ba79c03-0d77-38a4-8d1c-56d7199e0bc2",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "0610266d-1b0f-3348-af7c-4128fa942312",
              "name": "resources.rules.dangerous-subprocess-use",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dangerous-subprocess-use"
              },
              "fullDescription": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected subprocess function '$FUNC' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess](https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess)\n - [https://docs.python.org/3/library/subprocess.html](https://docs.python.org/3/library/subprocess.html)\n - [https://docs.python.org/3/library/shlex.html](https://docs.python.org/3/library/shlex.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dangerous-subprocess-use"
                ]
              }
            },
            {
              "id": "4b6e8d4d-13ea-3440-8075-f58abe375a6e",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "70d26c70-915b-3ba8-8f7f-7876ef5cb304",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "4b5be042-bc6a-3622-9110-29f9775e1cc8",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "ca0a1dd2-23c8-36f2-ae36-52d946d04ecf",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "2b3bb6b4-51a2-37f1-b431-bbd1a9450b68",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "284b638b-599a-3b9c-89e8-d4c0ccd5333d",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "689f1149-355d-3a39-bae9-ff753c404bc7",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "62af2821-14b4-3287-bdb6-7bb8bbb36b24",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "bb4f9591-8956-3ca1-a4a2-25ca87905887",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e4012c09-edd5-3124-8356-6b97593d781e",
              "name": "python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.insecure-uuid-version.insecure-uuid-version"
              },
              "fullDescription": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "help": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version)\n - [https://www.landh.tech/blog/20230811-sandwich-attack/](https://www.landh.tech/blog/20230811-sandwich-attack/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.insecure-uuid-version.insecure-uuid-version"
                ]
              }
            },
            {
              "id": "4c6d206f-b12d-314d-9541-3bf445ff9ff1",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "94e25b42-d4db-30f5-9254-e549fb12fcf7",
              "name": "python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.insecure-uuid-version.insecure-uuid-version"
              },
              "fullDescription": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "help": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version)\n - [https://www.landh.tech/blog/20230811-sandwich-attack/](https://www.landh.tech/blog/20230811-sandwich-attack/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.insecure-uuid-version.insecure-uuid-version"
                ]
              }
            },
            {
              "id": "d29587ad-30c5-3de6-96f5-db2c08ca5a4c",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "a0ce1ca2-0d8e-3783-a780-b1275e624f7c",
              "name": "resources.rules.useless-assignment-keyed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-assignment-keyed"
              },
              "fullDescription": {
                "text": "key `$Y` in `$X` is assigned twice; the first assignment is useless"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$Y` in `$X` is assigned twice; the first assignment is useless\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$Y` in `$X` is assigned twice; the first assignment is useless\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-assignment-keyed"
                ]
              }
            },
            {
              "id": "36aa583a-e8c4-3fcd-912a-45d61e88cd22",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "9c22556e-ad11-3486-b25a-25692c257524",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "af7c55fb-9c2e-36b4-9855-a894eaca4936",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f44a7232-66ba-3299-8459-5741fd888548",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "58f20195-4e41-3643-a83e-5730c13bc42b",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "e4ef372b-8a28-3a71-945f-a36140b5934c",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "9f76f66d-bb07-33a7-a281-e28132531f95",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "b126dd5e-fc97-3690-885e-3737566abe88",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f998578b-95c5-3eb9-ae7e-a850871761e8",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "62661082-46a6-3997-8fb7-560fb8f061ed",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "259fa5cd-2a33-3794-bb96-cf8bf7b42391",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "8fa845ba-3d8b-3372-b0bd-234c1ecef8f3",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "8fb72511-bf6b-3e96-84b1-09fbe516d4f0",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "fe69314a-11a6-33e4-8eeb-bfaaba676c6b",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "1b4f1a1a-f89c-3041-9633-8064d5b7df2a",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "821cd065-6057-36eb-9d25-b0d3d5c0f2a7",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "005b5370-6c3b-39a8-84bd-9ad37ff0818c",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "28614920-c3b5-3c5e-b649-e99063a38ac4",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "2ad03a50-d3dc-3fbc-a59e-05d6a8ce4d06",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "f9ff7080-3441-33b0-81a6-f8f5a687d5ba",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "93bb7c8e-326b-3eb7-b130-51230a9eceea",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "75b3d815-c7f4-3bbf-ace9-1b76aea3025d",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "c428e430-89ef-3c0b-af05-5e147a169cdd",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "0358a9de-d7ef-3504-9c45-de8e153a2458",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "977d7f19-cd83-3b3e-8096-0a01f54db209",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "182b6c35-f48d-36de-b48f-1b5ba4bdd709",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "400e41a9-2dac-37e7-9d63-c5c8be870eed",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "c29d2aca-d979-33d0-b790-de48b6203b73",
              "name": "resources.rules.return-not-in-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-not-in-function"
              },
              "fullDescription": {
                "text": "`return` only makes sense inside a function"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "`return` only makes sense inside a function\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` only makes sense inside a function\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-not-in-function"
                ]
              }
            },
            {
              "id": "90e799fd-8be0-3b40-815d-e1ff220564da",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "1660b148-f76b-3a31-a6a9-06231da0cba8",
              "name": "resources.rules.use-sys-exit",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.use-sys-exit"
              },
              "fullDescription": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.use-sys-exit"
                ]
              }
            },
            {
              "id": "ba5b406b-28a2-3746-a9e8-08a8af7acf62",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "b5a31351-b5a4-3aa4-be70-0e54140f711b",
              "name": "resources.rules.useless-assignment-keyed",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-assignment-keyed"
              },
              "fullDescription": {
                "text": "key `$Y` in `$X` is assigned twice; the first assignment is useless"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "help": {
                "text": "key `$Y` in `$X` is assigned twice; the first assignment is useless\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "key `$Y` in `$X` is assigned twice; the first assignment is useless\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-assignment-keyed"
                ]
              }
            },
            {
              "id": "55ed4099-426d-3cc4-b46f-78712b6339cc",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c9f600ff-b637-3696-84f9-a6a4892ff0bb",
              "name": "python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.insecure-uuid-version.insecure-uuid-version"
              },
              "fullDescription": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "help": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version)\n - [https://www.landh.tech/blog/20230811-sandwich-attack/](https://www.landh.tech/blog/20230811-sandwich-attack/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.insecure-uuid-version.insecure-uuid-version"
                ]
              }
            },
            {
              "id": "428d39b6-404c-3adc-b1d8-807156f85a70",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "2827793d-4efb-3816-9b96-c7ac3f33655e",
              "name": "resources.rules.list-modify-while-iterate",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.list-modify-while-iterate"
              },
              "fullDescription": {
                "text": "It appears that `$LIST` is a list that is being modified while in a for loop.\nThis will likely cause a runtime error or an infinite loop.\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "It appears that `$LIST` is a list that is being modified while in a for loop.\nThis will likely cause a runtime error or an infinite loop.\n\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "It appears that `$LIST` is a list that is being modified while in a for loop.\nThis will likely cause a runtime error or an infinite loop.\n\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.list-modify-while-iterate"
                ]
              }
            },
            {
              "id": "8a63db7d-6be9-320c-9ba5-78a0cbe27343",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "8643099f-1ab7-3476-91c8-8c7fb3ebf04d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "7fe418ce-aabd-3e1f-917b-83eca8766141",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "295ee136-a0aa-35e9-8535-38af2ccaa036",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.deserialization.pickle.avoid-pickle"
              },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "help": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle)\n - [https://docs.python.org/3/library/pickle.html](https://docs.python.org/3/library/pickle.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.deserialization.pickle.avoid-pickle"
                ]
              }
            },
            {
              "id": "08275f07-7efe-33d9-931f-d6c6b52a6931",
              "name": "python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.insecure-uuid-version.insecure-uuid-version"
              },
              "fullDescription": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version",
              "help": {
                "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-uuid-version.insecure-uuid-version)\n - [https://www.landh.tech/blog/20230811-sandwich-attack/](https://www.landh.tech/blog/20230811-sandwich-attack/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.insecure-uuid-version.insecure-uuid-version"
                ]
              }
            },
            {
              "id": "9aca9b39-1d7d-35b9-a92d-edf50269e9ee",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "53534619-14ff-3170-83f4-fa13adec84aa",
              "name": "resources.rules.return-in-init",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.return-in-init"
              },
              "fullDescription": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "`return` should never appear inside a class __init__ function. This will cause a runtime error.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.return-in-init"
                ]
              }
            },
            {
              "id": "ca6dcb01-ba1f-3eaf-aab3-353cb2de9650",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "99990f49-828b-30a6-bd2d-b70c1dd647bb",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "542d1bc9-811f-3223-b2a6-b641ee26909a",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "055eb7e7-be10-3ec5-b43f-70b57685d5d4",
              "name": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
              },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "help": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1)\n - [https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html](https://www.schneier.com/blog/archives/2012/10/when_will_we_se.html)\n - [https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability](https://www.trendmicro.com/vinfo/us/security/news/vulnerabilities-and-exploits/sha-1-collision-signals-the-end-of-the-algorithm-s-viability)\n - [http://2012.sharcs.org/slides/stevens.pdf](http://2012.sharcs.org/slides/stevens.pdf)\n - [https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html](https://pycryptodome.readthedocs.io/en/latest/src/hash/sha3_256.html)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1"
                ]
              }
            },
            {
              "id": "05eaf877-046b-34f8-bd74-3d7c9a6bfbc4",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "7b0e8bd2-11a5-3797-89a5-8ff68a89aaf7",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "4c13e333-f2e5-3ced-baf1-b414ad941617",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "8dac1833-32d8-3b6d-abbe-9dd33129205d",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "e5f59957-21f4-37a5-96e7-78bd57fa68ec",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "d6a7d445-76c5-3f13-bb7d-883fdde7e52e",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "76a86994-4a4e-3b3f-b36b-106925a7b130",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "2426b53c-e946-379f-be61-8b1e75ab654a",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "3a1fec2e-b043-3392-9d97-39b031eb7f43",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "c3b42b42-66dd-378f-b516-80c227c949a3",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "d95ba8be-7fd4-3dcc-93c8-163886b2ee7c",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "4e9c9e9d-8b17-3a6e-9dc2-f56828880ecf",
              "name": "resources.rules.useless-inner-function",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.useless-inner-function"
              },
              "fullDescription": {
                "text": "function `$FF` is defined inside a function but never used"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "function `$FF` is defined inside a function but never used\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "function `$FF` is defined inside a function but never used\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.useless-inner-function"
                ]
              }
            },
            {
              "id": "2a68ff71-71a4-33e8-91a8-5cd5534bd896",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "9a063d74-c397-3a9d-9bd9-9d3625a9f77d",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "c92fd283-c8c2-393c-8af1-ecd73ffb08e5",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "08159f77-ee07-3efe-a7b8-f4c54c67e483",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "680ea13c-8c0c-3a96-8771-40820a4d243a",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "d9c522bf-8c28-3cd1-8fd0-13cd28628ca4",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "f3fb518c-3b4d-3c31-97fd-0be540b1eaf3",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            },
            {
              "id": "58f6d720-c08f-39cc-98b8-3a989b2c0395",
              "name": "resources.rules.dlint-catastrophic-redos",
              "shortDescription": {
                "text": "Opengrep Finding: resources.rules.dlint-catastrophic-redos"
              },
              "fullDescription": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "error"
              },
              "help": {
                "text": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Regex `$X` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/](https://r2c.dev/blog/2020/finding-python-redos-bugs-at-scale-using-dlint-and-r2c/)\n - [https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/](https://r2c.dev/blog/2020/improving-redos-detection-with-dlint-and-r2c/)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "resources.rules.dlint-catastrophic-redos"
                ]
              }
            },
            {
              "id": "196054ce-4e90-3ad3-8a0d-49c901ee4595",
              "name": "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "shortDescription": {
                "text": "Opengrep Finding: python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"
              },
              "fullDescription": {
                "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2",
              "help": {
                "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2)\n - [https://jinja.palletsprojects.com/en/2.11.x/api/#basics](https://jinja.palletsprojects.com/en/2.11.x/api/#basics)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2"
                ]
              }
            },
            {
              "id": "e25dccd0-2cea-382c-84dd-215e9208abb2",
              "name": "python.lang.security.audit.non-literal-import.non-literal-import",
              "shortDescription": {
                "text": "Opengrep Finding: python.lang.security.audit.non-literal-import.non-literal-import"
              },
              "fullDescription": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import",
              "help": {
                "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\nðŸ’Ž Enable cross-file analysis and Pro rules for free at sg.run/pro",
                "markdown": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code.\n\n#### ðŸ’Ž Enable cross-file analysis and Pro rules for free at <a href='https://sg.run/pro'>sg.run/pro</a>\n\n<b>References:</b>\n - [Semgrep Rule](https://semgrep.dev/r/python.lang.security.audit.non-literal-import.non-literal-import)\n - [https://owasp.org/Top10/A01_2021-Broken_Access_Control](https://owasp.org/Top10/A01_2021-Broken_Access_Control)\n"
              },
              "properties": {
                "precision": "very-high",
                "tags": [
                  "python.lang.security.audit.non-literal-import.non-literal-import"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "a03ca430-b846-3577-bfca-e4baa1627868",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'shuffle_method' is missing a rate-limiting decorator.\nHigh volume traffic to this function could starve application\nresources. Consider adding rate limiting from a library such\nas 'django-ratelimit'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "conftest.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 1,
                  "endLine": 98,
                  "endColumn": 28,
                  "snippet": {
                    "text": "@pytest.fixture(params=[\"disk\", \"tasks\"])\ndef shuffle_method(request):\n    with dask.config.set({\"dataframe.shuffle.method\": request.param}):\n        yield request.param"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "94db52d20e63e9e2e71f56dcc57a3a59731ccd39f0e13b7c31afbb397cb99de8c37a747b20439cc1e24bc064e882334a5ccd399e0d8e9d644fffbf8a52c72e14_0"
          },
          "properties": {}
        },
        {
          "ruleId": "dba00224-9ae8-3667-80d1-dd8bd4b14369",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'=\\s*\"(.*)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 26,
                  "endLine": 167,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    mo = re.search(r'=\\s*\"(.*)\"', line)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3621882756bd300c8bd664a71bf7ee80b6392c4225dbbff48abac03ebe3230e93a49841de82f070401f9f641d917d617f66e938a0e50e81af48adf2661fe552a_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2ba79c03-0d77-38a4-8d1c-56d7199e0bc2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'STARTUPINFO' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 23,
                  "endLine": 83,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        startupinfo = subprocess.STARTUPINFO()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1eec02b02880e8789a91d562a2114a547484a1eb101c5e384441b7562ddebd2142ae5c91f39b3a3050fb43af292d96fb039376055ecafef64260e17179ce8084_0"
          },
          "properties": {}
        },
        {
          "ruleId": "0610266d-1b0f-3348-af7c-4128fa942312",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected subprocess function 'Popen' without a static string. If this data can be\ncontrolled by a malicious actor, it may be an instance of command injection.\nAudit the use of this call to ensure it is not controllable by an external resource.\nYou may consider using 'shlex.escape()'.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 23,
                  "endLine": 98,
                  "endColumn": 14,
                  "snippet": {
                    "text": "            process = subprocess.Popen(\n                [command] + args,\n                cwd=cwd,\n                env=env,\n                stdout=subprocess.PIPE,\n                stderr=(subprocess.PIPE if hide_stderr else None),\n                **popen_kwargs,\n            )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6e5d6501f9f83c120dc4d04cd2ff30ba35de433a65abb7c5f4a6a90c2b0f94ea7ddcee681c13b08b489f59c470fb766f6b57f59cfbfe3544738ed5a53a11d2e9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4b6e8d4d-13ea-3440-8075-f58abe375a6e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'=\\s*\"(.*)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 26,
                  "endLine": 163,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    mo = re.search(r'=\\s*\"(.*)\"', line)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3621882756bd300c8bd664a71bf7ee80b6392c4225dbbff48abac03ebe3230e93a49841de82f070401f9f641d917d617f66e938a0e50e81af48adf2661fe552a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "70d26c70-915b-3ba8-8f7f-7876ef5cb304",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\d\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 36,
                  "endLine": 215,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        tags = {r for r in refs if re.search(r\"\\d\", r)}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "246d8dc71469c96bd15abd71429a3e9175f433da0901abd9a1575dbea981ecbbebf68c24a4d9eaf6f3b0b63857110d8f49169304bd1f7ab62b8505021486c9e0_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4b5be042-bc6a-3622-9110-29f9775e1cc8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\d\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 20,
                  "endLine": 227,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            if not re.match(r\"\\d\", r):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "246d8dc71469c96bd15abd71429a3e9175f433da0901abd9a1575dbea981ecbbebf68c24a4d9eaf6f3b0b63857110d8f49169304bd1f7ab62b8505021486c9e0_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ca0a1dd2-23c8-36f2-ae36-52d946d04ecf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'=\\s*\"(.*)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 26,
                  "endLine": 171,
                  "endColumn": 56,
                  "snippet": {
                    "text": "                    mo = re.search(r'=\\s*\"(.*)\"', line)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3621882756bd300c8bd664a71bf7ee80b6392c4225dbbff48abac03ebe3230e93a49841de82f070401f9f641d917d617f66e938a0e50e81af48adf2661fe552a_2"
          },
          "properties": {}
        },
        {
          "ruleId": "2b3bb6b4-51a2-37f1-b431-bbd1a9450b68",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^(.+)-(\\d+)-g([0-9a-f]+)$\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/_version.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 14,
                  "endLine": 350,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        mo = re.search(r\"^(.+)-(\\d+)-g([0-9a-f]+)$\", git_describe)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d1444705cfb20311a9b7920fa72ba654ec5e646e621b9b0faf22c1a73b6f147929767bf1e09844cf3f1c916f2ec7346c29af4c08e9e7f66f232090a4f85164b2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "284b638b-599a-3b9c-89e8-d4c0ccd5333d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `cupy_to_numpy` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/backends.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 5,
                  "endLine": 140,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    @to_numpy_dispatch.register(cupy.ndarray)\n    def cupy_to_numpy(data, **kwargs):\n        return cupy.asnumpy(data, **kwargs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b296f035c32db70fb17b7beddfff09dde4d3c5c5e57ff7920c9afdd91ad0b2598ecdb48b33133f224784222d9be122379db625c598eb0decdb6a2b71b6a3f14_0"
          },
          "properties": {}
        },
        {
          "ruleId": "689f1149-355d-3a39-bae9-ff753c404bc7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `_cupy_einsum` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/backends.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 5,
                  "endLine": 151,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    @einsum_lookup.register(cupy.ndarray)\n    def _cupy_einsum(*args, **kwargs):\n        # NB: cupy does not accept `order` or `casting` kwargs - ignore\n        kwargs.pop(\"casting\", None)\n        kwargs.pop(\"order\", None)\n        return cupy.einsum(*args, **kwargs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b296f035c32db70fb17b7beddfff09dde4d3c5c5e57ff7920c9afdd91ad0b2598ecdb48b33133f224784222d9be122379db625c598eb0decdb6a2b71b6a3f14_2"
          },
          "properties": {}
        },
        {
          "ruleId": "62af2821-14b4-3287-bdb6-7bb8bbb36b24",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `numpy_to_cupy` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/backends.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 5,
                  "endLine": 144,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    @to_cupy_dispatch.register(np.ndarray)\n    def numpy_to_cupy(data, **kwargs):\n        return cupy.asarray(data, **kwargs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1b296f035c32db70fb17b7beddfff09dde4d3c5c5e57ff7920c9afdd91ad0b2598ecdb48b33133f224784222d9be122379db625c598eb0decdb6a2b71b6a3f14_1"
          },
          "properties": {}
        },
        {
          "ruleId": "bb4f9591-8956-3ca1-a4a2-25ca87905887",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"_\\d+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 504,
                  "startColumn": 33,
                  "endLine": 504,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    elif isinstance(x, str) and re.match(r\"_\\d+\", x):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52a13dd3607acbf5267aeb677657cd3ca697389f9e1b32de90838fc71c0ae87bed188d561ad0327824a8234c68e9cce5b3ae09bc4f04ad161f704a392bd02996_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e4012c09-edd5-3124-8356-6b97593d781e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 3491,
                  "startColumn": 31,
                  "endLine": 3491,
                  "endColumn": 43,
                  "snippet": {
                    "text": "        name = \"array-\" + str(uuid.uuid1())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5922fa5fddd48549d257ac2715d88b26593f611e771ff3b35ee34d70d9a2d0e7f64ecb263a7015039d23b9b7d79f837a2094c50625fb7a05fe06144ee435d12_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4c6d206f-b12d-314d-9541-3bf445ff9ff1",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5677,
                  "startColumn": 9,
                  "endLine": 5677,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        pickle.dump(meta, f)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cbc03ab08dc777efc0f49f6fd6f7f4813f9ab63741c1766ea0d1f4b9267809ec9cfb58f73a2d902aa50a6ed8d98c5d0f0bb50a23bec00a6f9a2b93e2068f6f49_0"
          },
          "properties": {}
        },
        {
          "ruleId": "94e25b42-d4db-30f5-9254-e549fb12fcf7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5679,
                  "startColumn": 34,
                  "endLine": 5679,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    name = \"to-npy-stack-\" + str(uuid.uuid1())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5922fa5fddd48549d257ac2715d88b26593f611e771ff3b35ee34d70d9a2d0e7f64ecb263a7015039d23b9b7d79f837a2094c50625fb7a05fe06144ee435d12_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d29587ad-30c5-3de6-96f5-db2c08ca5a4c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 5704,
                  "startColumn": 16,
                  "endLine": 5704,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        info = pickle.load(f)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "98b5237f6307cbf4f412ddb0b62d59a20df941b27c38f6a64737db274aacefc2d2791a7e2cd138233a9dfb4354cf71c21a1a97829522eda32aa9d5f2fa8e6953_0"
          },
          "properties": {}
        },
        {
          "ruleId": "a0ce1ca2-0d8e-3783-a780-b1275e624f7c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `key` in `dsk` is assigned twice; the first assignment is useless"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/creation.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 671,
                  "startColumn": 21,
                  "endLine": 672,
                  "endColumn": 76,
                  "snippet": {
                    "text": "                    dsk[key] = (np.zeros, (m, n))\n                    dsk[key] = (partial(np.zeros_like, shape=(m, n)), meta)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "78da713025fb8dbc7eeaf9443980554741001c7d96064d64437ed4dde8e6375b1d01861ac007645419920f3f7ef457da6d2a2c970c6334c77f38ba350ab1c78d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "36aa583a-e8c4-3fcd-912a-45d61e88cd22",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\s+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/gufunc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 17,
                  "endLine": 44,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    signature = re.sub(r\"\\s+\", \"\", signature)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1c9ef8b785662d352bbe1a53f40dcb7a95d339e2e21cf6740e90292bab52f760f44b3d8de0047fbab7fd073520a30f35ede5291933ffa2b66c1210751df0c7cb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9c22556e-ad11-3486-b25a-25692c257524",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_SIGNATURE` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/gufunc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    if not re.match(_SIGNATURE, signature):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c02c7d235d85973f44e52d0ec29186a6b70c9520acb27511a54da750f3396e3fd2120d4b49d0ff29167b21d94dade076a8fcb46bc08efd7d8599bbc3c6fb143f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "af7c55fb-9c2e-36b4-9855-a894eaca4936",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_DIMENSION_NAME` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/gufunc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 15,
                  "endLine": 52,
                  "endColumn": 47,
                  "snippet": {
                    "text": "        tuple(re.findall(_DIMENSION_NAME, arg))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "8a96a04c6dab2b4189200c78b54183af74e8fe4d90d22277d2bd36ee779d8ba9a2e5f023989d0e246462def9f0ed0360e48effdec7c6add5d3d9c165186f6545_1"
          },
          "properties": {}
        },
        {
          "ruleId": "f44a7232-66ba-3299-8459-5741fd888548",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `_ARGUMENT` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/gufunc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 20,
                  "endLine": 53,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        for arg in re.findall(_ARGUMENT, out_txt)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ac097e762ad522dc35fbc28c5d0534bf8ca6f2e89287ccc1f72a9466292f3a726b4ab41a79d57d9f5c558da40f58bdbfe893d9357caa40d57be69ac5668ffb77_1"
          },
          "properties": {}
        },
        {
          "ruleId": "58f20195-4e41-3643-a83e-5730c13bc42b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\s+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/gufunc.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 299,
                  "startColumn": 17,
                  "endLine": 299,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    signature = re.sub(r\"\\s+\", \"\", signature)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1c9ef8b785662d352bbe1a53f40dcb7a95d339e2e21cf6740e90292bab52f760f44b3d8de0047fbab7fd073520a30f35ede5291933ffa2b66c1210751df0c7cb_1"
          },
          "properties": {}
        },
        {
          "ruleId": "e4ef372b-8a28-3a71-945f-a36140b5934c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/random.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 16,
                  "endLine": 112,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        return importlib.import_module(self._backend_name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "f93d361b7da465c4442654350399d61ceed8526a3603f36af7f5b540fefda22a167799cc514ddf4421305628897ac2f26e7b1cd1af59c4a1809b5c75485d2d10_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9f76f66d-bb07-33a7-a281-e28132531f95",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/random.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 533,
                  "startColumn": 16,
                  "endLine": 533,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        return importlib.import_module(_backend_name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "fc45399ce9fc5e6d68735f6898a646c6b3216dd7a9aea0dfce3f4813291c0d80c2e58a3ea41357e45618e34df8e7183d6dc75f1a66f4bb4df833388e6aeec06a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b126dd5e-fc97-3690-885e-3737566abe88",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'height=\"(\\d*\\.?\\d*)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/svg.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 24,
                  "endLine": 153,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        height = float(re.search(r'height=\"(\\d*\\.?\\d*)\"', header).groups()[0])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5138a0dcac706438617b0e72def00f5ff800875bc6b7ad9e4712b53aeed571d85dfeeaa658c814d08c46edf8e602db0e40b19130948dd19c76299ce9d2cc39cc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f998578b-95c5-3eb9-ae7e-a850871761e8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/random.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 19,
                  "endLine": 788,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    backend_lib = importlib.import_module(backend_name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "41bd37bd02a185b947288f14f95554c8c27ac15ba4521f67c76885d370056fcc330eb9874953f52056ca2368d7e234516949560c32517168b70c40c80dff0c8b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "62661082-46a6-3997-8fb7-560fb8f061ed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r'width=\"(\\d*\\.?\\d*)\"'` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/array/svg.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 23,
                  "endLine": 155,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        width = float(re.search(r'width=\"(\\d*\\.?\\d*)\"', header).groups()[0])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "3a4d891dd7158c764b3a19bb4600a8233773e40bfe9cac2d5f00c306c2ab4b6dddb22686511a5842d8157252d9c5720ccaf9eee1d571d65095c825df1a0ec531_0"
          },
          "properties": {}
        },
        {
          "ruleId": "259fa5cd-2a33-3794-bb96-cf8bf7b42391",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/bag/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 74,
                  "endLine": 77,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    \"no_result\", (object,), {\"__slots__\": (), \"__reduce__\": lambda self: \"no_result\"}"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "80ce1847f658bb1c8c9c8ed213f7aa33dd3959f3b7d6911461c3dff6afb20f426c538a6bf748d21f252e2ba6f8d4651522b36908c6f393291b0a9f9288d6136d_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8fa845ba-3d8b-3372-b0bd-234c1ecef8f3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1101,
                  "startColumn": 22,
                  "endLine": 1101,
                  "endColumn": 52,
                  "snippet": {
                    "text": "            result = pickle.dumps(func, protocol=4)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e4af780668f24a49b81656c883247b1005f1525a9302b1cec9e4d048f7fa3fb17f4d3cc2bca972037efecd57af066bdfb489c4c63ce941b3d8ee20dfef59fbff_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8fb72511-bf6b-3e96-84b1-09fbe516d4f0",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_index` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 5,
                  "endLine": 1138,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.Index)\n    def normalize_index(ind):\n        values = ind.array\n        return [ind.name, normalize_token(values)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_0"
          },
          "properties": {}
        },
        {
          "ruleId": "fe69314a-11a6-33e4-8eeb-bfaaba676c6b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_index` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1140,
                  "startColumn": 5,
                  "endLine": 1147,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.MultiIndex)\n    def normalize_index(ind):\n        codes = ind.codes\n        return (\n            [ind.name]\n            + [normalize_token(x) for x in ind.levels]\n            + [normalize_token(x) for x in codes]\n        )"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_1"
          },
          "properties": {}
        },
        {
          "ruleId": "1b4f1a1a-f89c-3041-9633-8064d5b7df2a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_categorical` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1149,
                  "startColumn": 5,
                  "endLine": 1151,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.Categorical)\n    def normalize_categorical(cat):\n        return [normalize_token(cat.codes), normalize_token(cat.dtype)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_2"
          },
          "properties": {}
        },
        {
          "ruleId": "821cd065-6057-36eb-9d25-b0d3d5c0f2a7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_period_array` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1153,
                  "startColumn": 5,
                  "endLine": 1157,
                  "endColumn": 71,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.arrays.PeriodArray)\n    @normalize_token.register(pd.arrays.DatetimeArray)\n    @normalize_token.register(pd.arrays.TimedeltaArray)\n    def normalize_period_array(arr):\n        return [normalize_token(arr.asi8), normalize_token(arr.dtype)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_3"
          },
          "properties": {}
        },
        {
          "ruleId": "005b5370-6c3b-39a8-84bd-9ad37ff0818c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_interval_array` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1159,
                  "startColumn": 5,
                  "endLine": 1165,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.arrays.IntervalArray)\n    def normalize_interval_array(arr):\n        return [\n            normalize_token(arr.left),\n            normalize_token(arr.right),\n            normalize_token(arr.closed),\n        ]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_4"
          },
          "properties": {}
        },
        {
          "ruleId": "28614920-c3b5-3c5e-b649-e99063a38ac4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_series` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1167,
                  "startColumn": 5,
                  "endLine": 1174,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.Series)\n    def normalize_series(s):\n        return [\n            s.name,\n            s.dtype,\n            normalize_token(s._values),\n            normalize_token(s.index),\n        ]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_5"
          },
          "properties": {}
        },
        {
          "ruleId": "2ad03a50-d3dc-3fbc-a59e-05d6a8ce4d06",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_dataframe` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1176,
                  "startColumn": 5,
                  "endLine": 1180,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.DataFrame)\n    def normalize_dataframe(df):\n        mgr = df._mgr\n        data = list(mgr.arrays) + [df.columns, df.index]\n        return list(map(normalize_token, data))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_6"
          },
          "properties": {}
        },
        {
          "ruleId": "f9ff7080-3441-33b0-81a6-f8f5a687d5ba",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_categorical_dtype` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1189,
                  "startColumn": 5,
                  "endLine": 1191,
                  "endColumn": 83,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.api.types.CategoricalDtype)\n    def normalize_categorical_dtype(dtype):\n        return [normalize_token(dtype.categories), normalize_token(dtype.ordered)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_8"
          },
          "properties": {}
        },
        {
          "ruleId": "93bb7c8e-326b-3eb7-b130-51230a9eceea",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_extension_array` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1182,
                  "startColumn": 5,
                  "endLine": 1186,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.api.extensions.ExtensionArray)\n    def normalize_extension_array(arr):\n        import numpy as np\n\n        return normalize_token(np.asarray(arr))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_7"
          },
          "properties": {}
        },
        {
          "ruleId": "75b3d815-c7f4-3bbf-ace9-1b76aea3025d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_period_dtype` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1193,
                  "startColumn": 5,
                  "endLine": 1195,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    @normalize_token.register(pd.api.extensions.ExtensionDtype)\n    def normalize_period_dtype(dtype):\n        return normalize_token(dtype.name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5b0c2d99e58f666c92de9cd1a0d70ded34ff3425cca82a9877b8a274adb3251c407c2651708e3cac6271491cc9a212f283c7d8d7b83f9eb445edaf060701066_9"
          },
          "properties": {}
        },
        {
          "ruleId": "c428e430-89ef-3c0b-af05-5e147a169cdd",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1239,
                  "startColumn": 44,
                  "endLine": 1239,
                  "endColumn": 84,
                  "snippet": {
                    "text": "                    data = hash_buffer_hex(pickle.dumps(x, pickle.HIGHEST_PROTOCOL))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e4af780668f24a49b81656c883247b1005f1525a9302b1cec9e4d048f7fa3fb17f4d3cc2bca972037efecd57af066bdfb489c4c63ce941b3d8ee20dfef59fbff_1"
          },
          "properties": {}
        },
        {
          "ruleId": "0358a9de-d7ef-3504-9c45-de8e153a2458",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_matrix` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1258,
                  "startColumn": 5,
                  "endLine": 1260,
                  "endColumn": 74,
                  "snippet": {
                    "text": "    @normalize_token.register(np.matrix)\n    def normalize_matrix(x):\n        return type(x).__name__, normalize_array(x.view(type=np.ndarray))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7306da880d2314d4287a60119425badf4a1da1a8073db269173fc9f0d5e093983da982499abc8eee4acc56c7e400c4e965992e5c399b77c728f63208e53fbc33_0"
          },
          "properties": {}
        },
        {
          "ruleId": "977d7f19-cd83-3b3e-8096-0a01f54db209",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_ufunc` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1265,
                  "startColumn": 5,
                  "endLine": 1272,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    @normalize_token.register(np.ufunc)\n    def normalize_ufunc(x):\n        try:\n            name = x.__name__\n            if getattr(np, name) is x:\n                return \"np.\" + name\n        except AttributeError:\n            return normalize_function(x)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7306da880d2314d4287a60119425badf4a1da1a8073db269173fc9f0d5e093983da982499abc8eee4acc56c7e400c4e965992e5c399b77c728f63208e53fbc33_1"
          },
          "properties": {}
        },
        {
          "ruleId": "182b6c35-f48d-36de-b48f-1b5ba4bdd709",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_bit_generator` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 5,
                  "endLine": 1276,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    @normalize_token.register(np.random.BitGenerator)\n    def normalize_bit_generator(bg):\n        return normalize_token(bg.state)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "7306da880d2314d4287a60119425badf4a1da1a8073db269173fc9f0d5e093983da982499abc8eee4acc56c7e400c4e965992e5c399b77c728f63208e53fbc33_2"
          },
          "properties": {}
        },
        {
          "ruleId": "400e41a9-2dac-37e7-9d63-c5c8be870eed",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `normalize_dok_matrix` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/base.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1299,
                  "startColumn": 5,
                  "endLine": 1301,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    @normalize_token.register(sp.dok_matrix)\n    def normalize_dok_matrix(x):\n        return type(x).__name__, normalize_token(sorted(x.items()))"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d0da429b89bf4e8b4a2646b840a5c1a6f08316e93eaca8257a2b2847c4ec5e75f350a19f6bc42d43c8020beba9f0edf5a6840fb774b59803e15a96d7a78d7cb9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c29d2aca-d979-33d0-b790-de48b6203b73",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` only makes sense inside a function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/bytes/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 21,
                  "endLine": 23,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    None: lambda x: x,"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "1bb046e2d07629f0c8cec008c9306ef5c3f48b10b5f4aa70d9b1ef8429d4d475fa87e74ab9b4b689bfe4f16299c4a4e0dbf8c93cb04cf484f187d9ca4cc935eb_0"
          },
          "properties": {}
        },
        {
          "ruleId": "90e799fd-8be0-3b40-815d-e1ff220564da",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/cli.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 9,
                  "endLine": 65,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5836ca91db773ec74f792dcc83873a91a99fbdcc38ee2a51eb6282fec4df8b2dd50b7b0085e12ef9b39740315f8ed8ab8e33422c7c8cd8fafc85ad9ff125904_0"
          },
          "properties": {}
        },
        {
          "ruleId": "1660b148-f76b-3a31-a6a9-06231da0cba8",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use `sys.exit` over the python shell `exit` built-in. `exit` is a helper for the interactive shell and may not be available on all Python implementations. https://stackoverflow.com/questions/6501121/difference-between-exit-and-sys-exit-in-python"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/cli.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 13,
                  "endLine": 75,
                  "endColumn": 20,
                  "snippet": {
                    "text": "            exit(1)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "c5836ca91db773ec74f792dcc83873a91a99fbdcc38ee2a51eb6282fec4df8b2dd50b7b0085e12ef9b39740315f8ed8ab8e33422c7c8cd8fafc85ad9ff125904_1"
          },
          "properties": {}
        },
        {
          "ruleId": "ba5b406b-28a2-3746-a9e8-08a8af7acf62",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `meta_lib_from_array_cupy` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/backends.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 784,
                  "startColumn": 9,
                  "endLine": 787,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        @meta_lib_from_array.register(cupy.ndarray)\n        def meta_lib_from_array_cupy(x):\n            # cupy -> cudf\n            return cudf"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "05b4ffb725ace268c65cab8779c09ed2a907f3be87e58939d3d6b403f21480c70160c62e21bd7f63a5d90f27f6b3891d980262d72460b2d1ca14dc46172d334a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "b5a31351-b5a4-3aa4-be70-0e54140f711b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "key `k` in `data` is assigned twice; the first assignment is useless"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/core.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 7465,
                  "startColumn": 9,
                  "endLine": 7466,
                  "endColumn": 86,
                  "snippet": {
                    "text": "        data[k] = [d[k] for d in data_in]\n        data[k] = np.concatenate(data[k]).reshape((len(data[k]),) + data[k][0].shape)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6b44e64d1a6ca9287a3da2d7c600f9a6bd6f645fc6e1244413eeda1bc361969aa9c24d3172d2a9e9d394778e08a7b4aeb97ecea019e86f161f21a00931aaf0c9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "55ed4099-426d-3cc4-b46f-78712b6339cc",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"[^a-zA-Z0-9]\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/io/demo.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 22,
                  "endLine": 518,
                  "endColumn": 66,
                  "snippet": {
                    "text": "            prefix = re.sub(r\"[^a-zA-Z0-9]\", \"_\", f\"{col.dtype}\").rstrip(\"_\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4f0b13cc39afe3c1c2cc4ea9d0fed7a8a31ca1fb20a58be1358dbe19242574159e261c8b1f4cdbb1eddbfa4f0ca9c9547d44e2870f367d4741260365e1abcb83_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c9f600ff-b637-3696-84f9-a6a4892ff0bb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/io/hdf.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 24,
                  "endLine": 146,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    name = \"to-hdf-\" + uuid.uuid1().hex"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "94e740c8d2860884ca5e69c66ed1d4447672561beaf69042b2630ba73bfa9952de628651f4979a52d232cc1490e0750c830976c82f58f94864debc53189889c4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "428d39b6-404c-3adc-b1d8-807156f85a70",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `_get_schema` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/io/orc/arrow.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 9,
                  "endLine": 34,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        def _get_schema(_o, schema):\n            if schema is None:\n                schema = _o.schema\n            elif schema != _o.schema:\n                raise ValueError(\"Incompatible schemas while parsing ORC files\")\n            return schema"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "101a5b6022a91bb96265b8235610abe15b1bf7890fe571c81332f6eb618d2807606b2f884d70b050d34dba35547d3c2fa4a23df323573d232b5e7d06ce9a0eb4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "2827793d-4efb-3816-9b96-c7ac3f33655e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "It appears that `columns` is a list that is being modified while in a for loop.\nThis will likely cause a runtime error or an infinite loop.\n"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/io/parquet/arrow.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1746,
                  "startColumn": 13,
                  "endLine": 1751,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            for name in columns:\n                if name is None:\n                    if \"__index_level_0__\" in schema.names:\n                        columns.append(\"__index_level_0__\")\n                else:\n                    cols.append(name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "df373a7ce63ecce5e4a85477a3a1a8929a89c3c22a1a16b02fb6196662e0dd81132fa21280d0372dd7e373c3a72d035c911f41e7b8694f795077ef93ab24e212_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8a63db7d-6be9-320c-9ba5-78a0cbe27343",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/io/parquet/fastparquet.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1038,
                  "startColumn": 31,
                  "endLine": 1038,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                        rgs = pickle.loads(rgs)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "50e108b193e059945d8e077e8dd811b02f0c275bbca75c4e8afce9f97d7c312fc2e11c3749f8699948bb3388d7736b165145a572989143f2a4357cef01f474e5_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8643099f-1ab7-3476-91c8-8c7fb3ebf04d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"__index_level_\\d+__\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/io/parquet/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 22,
                  "endLine": 396,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    index_name_xpr = re.compile(r\"__index_level_\\d+__\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "da7c0425d1f245aff3ca1621b60c18c939fe4355313dc7856fff4d9619847d12f627a5e03c542a02cabfde4583c0cdb15c33047240271769a24bac653afa96ec_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7fe418ce-aabd-3e1f-917b-83eca8766141",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/multi.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1399,
                  "startColumn": 14,
                  "endLine": 1399,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        on = pickle.loads(on)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6a8fc9eacef4f9aeaa17595f6eaf4461d06058a0a7fedb4e82e6bee3a0b68c03a250b0ebd2c2613b2c2821600d13e358e58d7d49fd241ea2ede0b3e741d1fdc4_0"
          },
          "properties": {}
        },
        {
          "ruleId": "295ee136-a0aa-35e9-8535-38af2ccaa036",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/multi.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1440,
                  "startColumn": 16,
                  "endLine": 1440,
                  "endColumn": 31,
                  "snippet": {
                    "text": "            k: pickle.loads(v) if isinstance(v, bytes) else v for k, v in kwargs.items()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "6a8fc9eacef4f9aeaa17595f6eaf4461d06058a0a7fedb4e82e6bee3a0b68c03a250b0ebd2c2613b2c2821600d13e358e58d7d49fd241ea2ede0b3e741d1fdc4_1"
          },
          "properties": {}
        },
        {
          "ruleId": "08275f07-7efe-33d9-931f-d6c6b52a6931",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Using UUID version 1 for UUID generation can lead to predictable UUIDs based on system information (e.g., MAC address, timestamp). This may lead to security risks such as the sandwich attack. Consider using `uuid.uuid4()` instead for better randomness and security."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/shuffle.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 24,
                  "endLine": 577,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    always_new_token = uuid.uuid1().hex"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ec2893a7973b6b2961551d2a57a20dda7a9d19471ab4e0bd797a67b9321ce111c53f6ca376e6e7304b1b0df993889e01b41ac14c2e03377214a416ece42875ae_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9aca9b39-1d7d-35b9-a92d-edf50269e9ee",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"Parameters\\\\n[ ]*----------\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dataframe/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 27,
                  "endLine": 175,
                  "endColumn": 77,
                  "snippet": {
                    "text": "            first, last = re.split(\"Parameters\\\\n[ ]*----------\", f.__doc__)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "254577b6e5d6e64590a3fdbda1b282f8c11ee597f6207cebd9adbc72045529cab27d9a361b0af8ea00a308cad9f947ef8db63eae8e4d66048d2535533d7963b8_0"
          },
          "properties": {}
        },
        {
          "ruleId": "53534619-14ff-3170-83f4-fa13adec84aa",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "`return` should never appear inside a class __init__ function. This will cause a runtime error."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/diagnostics/profile.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 60,
                  "endLine": 352,
                  "endColumn": 61,
                  "snippet": {
                    "text": "        self._metric = metric if metric else lambda value: 1"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "941442c4048b759e39b8c405c764db1bb977d8770d8eea2e7d8ad44dd04c8f7a6b973a7f4306fd4227a17a249d8d314d55cf0039321722d01899734b9324204f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "ca6dcb01-ba1f-3eaf-aab3-353cb2de9650",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"([0-9a-z]{32})\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dot.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 12,
                  "endLine": 55,
                  "endColumn": 40,
                  "snippet": {
                    "text": "_HASHPAT = re.compile(\"([0-9a-z]{32})\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "cc073bfe606fdaa5a656222fb647c8e4f62b866fa5ebd8045630cea3a071cf158b807ce106942226aa484d808c45af066f5be37b5de3852566a0b5f992baba0f_0"
          },
          "properties": {}
        },
        {
          "ruleId": "99990f49-828b-30a6-bd2d-b70c1dd647bb",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dot.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 12,
                  "endLine": 56,
                  "endColumn": 88,
                  "snippet": {
                    "text": "_UUIDPAT = re.compile(\"([0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12})\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "008fed143e8b03e077fdbb77f6aaf7b906211d311ba9aa226f9cadd2dfadeaa0a2065a7a70d73f308a383b564a751765c65240b558ba8202fb1816d4b85a85a1_0"
          },
          "properties": {}
        },
        {
          "ruleId": "542d1bc9-811f-3223-b2a6-b641ee26909a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `pattern` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/dot.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 13,
                  "endLine": 86,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        m = re.search(pattern, s)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a16e901d772afbe41c8481ab1b509f2e3cb371b2b68ecc7c057ff41a3e8ae77b39ab2372c1d37dfec46e688bb225de6fc46b28f2f6933ed81f40c862b6a01d21_0"
          },
          "properties": {}
        },
        {
          "ruleId": "055eb7e7-be10-3ec5-b43f-70b57685d5d4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/hashing.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 12,
                  "endLine": 67,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    return hashlib.sha1(buf).digest()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "a7e3f0bd6129092bf57c97ad132eec3a97b4d545a32ffeb898dc22ddd88adb3ee28e240a3a39e9203255d10d148fe0d0f30eac18d6c910d68320290b3f538b75_0"
          },
          "properties": {}
        },
        {
          "ruleId": "05eaf877-046b-34f8-bd74-3d7c9a6bfbc4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_cupy_ndarray` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 5,
                  "endLine": 100,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @sizeof.register(cupy.ndarray)\n    def sizeof_cupy_ndarray(x):\n        return int(x.nbytes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0ef4899f47eb06ea5de183fb7dd39286dd5b94acbd8003467fd0952c46116f873f6ff640562d181e6e878930ee12e1c3a6383fcde43b1ab7f02bbb9caabb6aaa_0"
          },
          "properties": {}
        },
        {
          "ruleId": "7b0e8bd2-11a5-3797-89a5-8ff68a89aaf7",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_numba_devicendarray` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 5,
                  "endLine": 109,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @sizeof.register(numba.cuda.cudadrv.devicearray.DeviceNDArray)\n    def sizeof_numba_devicendarray(x):\n        return int(x.nbytes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5325188add1b3669087d20e5de152d236dcf3b0a784297015afd95b5855cf7bd3bf9a4f20551d6d8f0729641c959e822444ffaec8cf9518dd59e46a1d548284b_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4c13e333-f2e5-3ced-baf1-b414ad941617",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_rmm_devicebuffer` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 9,
                  "endLine": 121,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        @sizeof.register(rmm.DeviceBuffer)\n        def sizeof_rmm_devicebuffer(x):\n            return int(x.nbytes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ed2b1d9daf444bc6b9ad0270dfba79f2df1d2889f395d44664d5dc4e1e5fa5b2d4c8f3c511501d7fb31ff3ddea3d333d0a7a119705da6a6255ccc68b83e1e79e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "8dac1833-32d8-3b6d-abbe-9dd33129205d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_numpy_ndarray` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 5,
                  "endLine": 133,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @sizeof.register(np.ndarray)\n    def sizeof_numpy_ndarray(x):\n        if 0 in x.strides:\n            xs = x[tuple(slice(None) if s != 0 else slice(1) for s in x.strides)]\n            return xs.nbytes\n        return int(x.nbytes)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "5c4e19be83dc53db47a5c1576df318f651c8279a49ee7babe313c2b6c121bb99d8a56aac58285aa5e835b59957ceb11687049bf5b0e8df8329d8adaab5f8c21e_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e5f59957-21f4-37a5-96e7-78bd57fa68ec",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_pandas_dataframe` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 5,
                  "endLine": 190,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    @sizeof.register(pd.DataFrame)\n    def sizeof_pandas_dataframe(df):\n        p = sizeof(df.index) + sizeof(df.columns)\n        object_cols = []\n        prev_dtype = None\n\n        # Unlike df.items(), df._series will not duplicate multiple views of the same\n        # column e.g. df[[\"x\", \"x\", \"x\"]]\n        for col in df._series.values():\n            if prev_dtype is None or col.dtype != prev_dtype:\n                prev_dtype = col.dtype\n                # Contiguous columns of the same dtype share the same overhead\n                p += 1200\n            p += col.memory_usage(index=False, deep=False)\n            if col.dtype in OBJECT_DTYPES:\n                object_cols.append(col._values)\n\n        # Deduplicate references to the same objects appearing in different Series\n        p += object_size(*object_cols)\n\n        return max(1200, p)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ea6c4944e3b2d2d322c4941c336fc2b09fb2e7d81439429a443890b70acf14c84229c2a6d2dda728c7dc9725880748573d98d02040a4a6a152a64797e73e2d6_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d6a7d445-76c5-3f13-bb7d-883fdde7e52e",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_pandas_series` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 192,
                  "startColumn": 5,
                  "endLine": 198,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    @sizeof.register(pd.Series)\n    def sizeof_pandas_series(s):\n        # https://github.com/dask/dask/pull/9776#issuecomment-1359085962\n        p = 1200 + sizeof(s.index) + s.memory_usage(index=False, deep=False)\n        if s.dtype in OBJECT_DTYPES:\n            p += object_size(s._values)\n        return p"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ea6c4944e3b2d2d322c4941c336fc2b09fb2e7d81439429a443890b70acf14c84229c2a6d2dda728c7dc9725880748573d98d02040a4a6a152a64797e73e2d6_1"
          },
          "properties": {}
        },
        {
          "ruleId": "76a86994-4a4e-3b3f-b36b-106925a7b130",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_pandas_index` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 5,
                  "endLine": 205,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    @sizeof.register(pd.Index)\n    def sizeof_pandas_index(i):\n        p = 400 + i.memory_usage(deep=False)\n        if i.dtype in OBJECT_DTYPES:\n            p += object_size(i)\n        return p"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ea6c4944e3b2d2d322c4941c336fc2b09fb2e7d81439429a443890b70acf14c84229c2a6d2dda728c7dc9725880748573d98d02040a4a6a152a64797e73e2d6_2"
          },
          "properties": {}
        },
        {
          "ruleId": "2426b53c-e946-379f-be61-8b1e75ab654a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_pandas_multiindex` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 5,
                  "endLine": 212,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    @sizeof.register(pd.MultiIndex)\n    def sizeof_pandas_multiindex(i):\n        p = sum(sizeof(lev) for lev in i.levels)\n        for c in i.codes:\n            p += c.nbytes\n        return p"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "4ea6c4944e3b2d2d322c4941c336fc2b09fb2e7d81439429a443890b70acf14c84229c2a6d2dda728c7dc9725880748573d98d02040a4a6a152a64797e73e2d6_3"
          },
          "properties": {}
        },
        {
          "ruleId": "3a1fec2e-b043-3392-9d97-39b031eb7f43",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_spmatrix_dok` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 5,
                  "endLine": 221,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    @sizeof.register(sparse.dok_matrix)\n    def sizeof_spmatrix_dok(s):\n        return s.__sizeof__()"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9ae8679fa416bf5611cd356d8f005aa26a3e8a2d2af60f4c120b033c0cdd57e9e5fa9533657c1dfbe9dfa24b5ecb668e8bd3220439bbbfc733675c210baf0fc9_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c3b42b42-66dd-378f-b516-80c227c949a3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_spmatrix` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 5,
                  "endLine": 225,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    @sizeof.register(sparse.spmatrix)\n    def sizeof_spmatrix(s):\n        return sum(sizeof(v) for v in s.__dict__.values())"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "9ae8679fa416bf5611cd356d8f005aa26a3e8a2d2af60f4c120b033c0cdd57e9e5fa9533657c1dfbe9dfa24b5ecb668e8bd3220439bbbfc733675c210baf0fc9_1"
          },
          "properties": {}
        },
        {
          "ruleId": "d95ba8be-7fd4-3dcc-93c8-163886b2ee7c",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_pyarrow_table` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 5,
                  "endLine": 247,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    @sizeof.register(pa.Table)\n    def sizeof_pyarrow_table(table):\n        p = sizeof(table.schema.metadata)\n        for col in table.itercolumns():\n            p += _get_col_size(col)\n        return int(p) + 1000"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0b9dbc988fff522fd8a6b70600b2f2f22b4b1a37f6e7d8b32fb50ed65beb781b02defb7b05484f7953ef07df09958ceec1f4c2a2f6407b22673c2e808ee1c6bc_0"
          },
          "properties": {}
        },
        {
          "ruleId": "4e9c9e9d-8b17-3a6e-9dc2-f56828880ecf",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "function `sizeof_pyarrow_chunked_array` is defined inside a function but never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/sizeof.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 5,
                  "endLine": 251,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    @sizeof.register(pa.ChunkedArray)\n    def sizeof_pyarrow_chunked_array(data):\n        return int(_get_col_size(data)) + 1000"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0b9dbc988fff522fd8a6b70600b2f2f22b4b1a37f6e7d8b32fb50ed65beb781b02defb7b05484f7953ef07df09958ceec1f4c2a2f6407b22673c2e808ee1c6bc_1"
          },
          "properties": {}
        },
        {
          "ruleId": "2a68ff71-71a4-33e8-91a8-5cd5534bd896",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 16,
                  "endLine": 196,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        return import_module(mod_name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "ea0d023a144844d2674c5588ec62e1a8a609ac22bf7754868a4484155213c0eb5d2ba1f6993a11a89511fbbd596fcfa10dc4fae8499ad53047062f3fcd132443_0"
          },
          "properties": {}
        },
        {
          "ruleId": "9a063d74-c397-3a9d-9bd9-9d3625a9f77d",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"\\s*\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 729,
                  "startColumn": 18,
                  "endLine": 729,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        indent = re.match(r\"\\s*\", tail).group(0)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d82fe7d7283d0c8327d00e6447c14feca8fe8328e987e7d4c537c989ab4afbff6df25d45bb743f211962ce5b5c8ea1cbf68d99bd135fa671d976a7b52b05f7ad_0"
          },
          "properties": {}
        },
        {
          "ruleId": "c92fd283-c8c2-393c-8af1-ecd73ffb08e5",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"^\\s*\" + arg + \" ?:\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 16,
                  "endLine": 752,
                  "endColumn": 53,
                  "snippet": {
                    "text": "            if re.match(r\"^\\s*\" + arg + \" ?:\", line)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "0da7076acaa48d640e240a51d6cb4c2851e4b847041a490d44d9fe02d50cf02de9fd4ce21d87d1fa019b66d67aa44afa24d9c22b28ca0c8d5410e4bc51019c19_0"
          },
          "properties": {}
        },
        {
          "ruleId": "08159f77-ee07-3efe-a7b8-f4c54c67e483",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"(\\d+)\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1457,
                  "startColumn": 63,
                  "endLine": 1457,
                  "endColumn": 84,
                  "snippet": {
                    "text": "    return [int(part) if part.isdigit() else part for part in re.split(r\"(\\d+)\", s)]"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "e08293fe7bd4e5e4aa7c37cc5216dd7c1d1862ec804b091c92d2fc6fd352f5f547eb8c311941fcfa6c53ab91dd56a873bf71c94966b94634b65650b3aa4e5719_0"
          },
          "properties": {}
        },
        {
          "ruleId": "680ea13c-8c0c-3a96-8771-40820a4d243a",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\"[a-f]+\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1821,
                  "startColumn": 15,
                  "endLine": 1821,
                  "endColumn": 35,
                  "snippet": {
                    "text": "hex_pattern = re.compile(\"[a-f]+\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "895307cd112ede1aba1682f7f2ea7139c7e200984f2e3b0edf85c22f2c889a2807e7051321b678ac2353bf10cb92472ee70846c33ebabfbb91bd0641583c51f2_0"
          },
          "properties": {}
        },
        {
          "ruleId": "d9c522bf-8c28-3cd1-8fd0-13cd28628ca4",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `r\"[a-f0-9]{32}\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 1871,
                  "startColumn": 34,
                  "endLine": 1871,
                  "endColumn": 67,
                  "snippet": {
                    "text": "        if len(result) == 32 and re.match(r\"[a-f0-9]{32}\", result):"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "806c3e83d32e9f96af97c0170760e6db3ea1501dd1606776b370571ec1ab5b776f42e6e6978e4a602ba5e2924a502950419f30e32ba77f77a72defc72969c904_0"
          },
          "properties": {}
        },
        {
          "ruleId": "f3fb518c-3b4d-3c31-97fd-0be540b1eaf3",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2135,
                  "startColumn": 12,
                  "endLine": 2135,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    return import_module(typename(like).partition(\".\")[0])"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "d528e0e5da39c93a5634f581fcbbf98180bd739d63aff423f98a3441fa94246f4c574e0fc1a4b3f3da2471ab098738438e2a88cd2e275cb8bb862585a2462c2a_0"
          },
          "properties": {}
        },
        {
          "ruleId": "58f6d720-c08f-39cc-98b8-3a989b2c0395",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Regex `\".*(\" + \"|\".join(paths) + \")\"` may be vulnerable to catastrophic backtracking, which may lead to denial of service attacks. (This rule only matches regex usage, not actual REDoS patterns. For full detection, use Semgrep Pro Engine.)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 2165,
                  "startColumn": 15,
                  "endLine": 2165,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        exp = re.compile(\".*(\" + \"|\".join(paths) + \")\")"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "52282902c37953f2972ce5cfd48df341f84940b34f334e191f0314b4137cb509802b0b70b2d16866f056c20d3c02d205c812495c92e12d7ad789fa28d5597848_0"
          },
          "properties": {}
        },
        {
          "ruleId": "196054ce-4e90-3ad3-8a0d-49c901ee4595",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method 'render_template()' and templates with a '.html' extension in order to prevent XSS."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/widgets/widgets.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 19,
                  "endLine": 28,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    environment = Environment(loader=loader)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "97e03d9f90aebe3a76adb9239b1e4f86f4b1ae795e620c708fbe6083ccbe3ee756ec2248d831d68081f5041fbcf068638bb63711c230725850720b08864a03dd_0"
          },
          "properties": {}
        },
        {
          "ruleId": "e25dccd0-2cea-382c-84dd-215e9208abb2",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running untrusted code."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "dask/utils_test.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 16,
                  "endLine": 136,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        return importlib.import_module(name)"
                  }
                }
              }
            }
          ],
          "fingerprints": {
            "matchBasedId/v1": "516b54a66666ef5656e2fcb1b7817aaef510baa3047414c05bb2053c1840cf136c00b2c3fe45cb08f316ce700b27f6c9b0976c216beff893cbd70ae46d85d176_0"
          },
          "properties": {}
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}